from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import os
import threading
import time
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv
import requests

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# ============================
#   Kh·ªüi t·∫°o app FastAPI
# ============================
app = FastAPI(title="ShipTrack Server")

# Cho ph√©p CORS (n·∫øu b·∫°n mu·ªën g·ªçi API t·ª´ web app)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ============================
#   C√°c route c∆° b·∫£n
# ============================
@app.get("/")
def root():
    """Trang g·ªëc ƒë·ªÉ ki·ªÉm tra server"""
    return {"message": "ShipTrack server is running"}

@app.get("/health")
def health():
    """Ki·ªÉm tra t√¨nh tr·∫°ng h·ªá th·ªëng"""
    return {"ok": True}


# ============================
#   API v√≠ d·ª•: c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
# ============================
@app.get("/refresh")
def refresh():
    """V√≠ d·ª• API test refresh"""
    return {"message": "ƒê√£ ch·∫°y c·∫≠p nh·∫≠t th·ªß c√¥ng!"}


# ============================
#   Telegram Notifier (s·∫Ω d√πng sau)
# ============================
def send_telegram_message(msg: str):
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    enabled = os.getenv("TELEGRAM_ENABLED", "false").lower() == "true"

    if not enabled or not token or not chat_id:
        print("[Telegram] Ch∆∞a b·∫≠t ho·∫∑c ch∆∞a c·∫•u h√¨nh.")
        return

    try:
        requests.post(
            f"https://api.telegram.org/bot{token}/sendMessage",
            json={"chat_id": chat_id, "text": msg},
            timeout=10,
        )
        print("[Telegram] G·ª≠i th√¥ng b√°o th√†nh c√¥ng.")
    except Exception as e:
        print(f"[Telegram] L·ªói: {e}")


# ============================
#   Scheduler auto refresh
# ============================
def auto_refresh_job():
    print("[Job] ƒêang ch·∫°y auto refresh ƒë∆°n h√†ng...")
    # ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ g·ªçi API GHN/SPX/J&T ƒë·ªÉ c·∫≠p nh·∫≠t
    # V√≠ d·ª• g·ª≠i th√¥ng b√°o Telegram khi ch·∫°y
    send_telegram_message("üöö ShipTrack: ƒêang t·ª± ƒë·ªông c·∫≠p nh·∫≠t ƒë∆°n h√†ng!")


ENABLE_SCHED = os.getenv("SCHED_ENABLED", "true").lower() == "true"

if ENABLE_SCHED:
    scheduler = BackgroundScheduler()
    scheduler.add_job(auto_refresh_job, "interval", minutes=3, id="auto_refresh")
    scheduler.start()
    print("[Scheduler] B·∫≠t ch·∫ø ƒë·ªô auto refresh m·ªói 3 ph√∫t.")
else:
    print("[Scheduler] ƒêang t·∫Øt auto refresh.")


# ============================
#   Ch·∫°y app c·ª•c b·ªô (n·∫øu c·∫ßn test)
# ============================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("server.main:app", host="0.0.0.0", port=8000, reload=True)
